[{"/Users/arjun/Downloads/app/src/index.js":"1","/Users/arjun/Downloads/app/src/App.js":"2","/Users/arjun/Downloads/app/src/components/Teams.js":"3","/Users/arjun/Downloads/app/src/components/WaitingList.js":"4","/Users/arjun/Downloads/app/src/components/Team.js":"5"},{"size":180,"mtime":1610924770000,"results":"6","hashOfConfig":"7"},{"size":5972,"mtime":1610913724541,"results":"8","hashOfConfig":"7"},{"size":1063,"mtime":1610934266000,"results":"9","hashOfConfig":"7"},{"size":2277,"mtime":1610945306000,"results":"10","hashOfConfig":"7"},{"size":2460,"mtime":1610913724542,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1op0ul8",{"filePath":"15","messages":"16","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"14"},"/Users/arjun/Downloads/app/src/index.js",[],["26","27"],"/Users/arjun/Downloads/app/src/App.js",["28","29","30"],"import {useState, useEffect} from 'react';\nimport './App.css';\nimport chefsJson from './data/chefs.json';\nimport WaitingList from \"./components/WaitingList\";\nimport Teams from \"./components/Teams\";\n\nfunction App() {\n    const [chefs, setChefs] = useState(chefsJson.chefs);\n    const [teams, setTeams] = useState([]);\n    const [waiting, setWaiting] = useState([]);\n    const [noOfTeams, setNoOfTeams] = useState(4);\n\n    useEffect(() => {\n        // set all chefs in wating list in the begining\n        setWaiting(chefs);\n    }, []);\n\n    const hanldeSubmit = e => {\n        e.preventDefault();\n\n        // check if user have not provided no. of teams greater then no. of chefs, which is not possible.\n        if (noOfTeams > chefs.length) {\n            alert(`You cannot create more teams then no. of chefs present.\\nChefs present: ${chefs.length}\\nMax no. of teams: ${chefs.length}`);\n            return;\n        }\n\n        // do some helping calculations\n        const reminder = chefs.length % noOfTeams;\n        const noOfChefsInEachTeam = (chefs.length - reminder) / noOfTeams;\n        const noOfChefsInWaitingList = reminder;\n        const noOfChefsTobeSelected = chefs.length - noOfChefsInWaitingList;\n\n        // separating the selected/not-selected chefs\n        const selectedChefs = chefs.slice(0, noOfChefsTobeSelected);\n        const notSelectedChefs = chefs.slice(noOfChefsTobeSelected, chefs.length);\n        // setting the waiting list\n        setWaiting(notSelectedChefs);\n\n        // adding average of abilities in each chef, so that we can compare chefs among each other to make equal teams\n        const chefsWithAverage = selectedChefs.map(x => {\n            return {...x, average: x.abilities.reduce((accu, curr) => accu + curr.rating, 0) / 4}\n        });\n\n        // sorting with average\n        const chefsOrderedWithAverage = chefsWithAverage.sort((a, b) => b.average - a.average);\n\n        // create a Map variable to store teams data\n        let result = new Map();\n\n        // giving name \"Team 1\", \"Team 2\" and so on to each team, initialzing with empty arrary\n        for (let j = 1; j <= noOfTeams; j++)\n            result.set(`Team ${j}`, new Array());\n\n        // separator will separate each chefs in teams\n        let separator = 1;\n\n        // looping through all selected chefs and putting them in teams\n        for (let i = 0; i < selectedChefs.length; i++) {\n\n            // getting existing chefs array in a team\n            let f = result.get(`Team ${separator}`);\n\n            // check if the team is not full yet, add one more chef with high average ability\n            if (f.length < noOfChefsInEachTeam) {\n                f.push(chefsOrderedWithAverage[i]);\n            }\n\n            // check if the team is not full yet, add one more chef with lowest average ability\n            if (f.length < noOfChefsInEachTeam) {\n                f.push(chefsOrderedWithAverage[selectedChefs.length - i - 1]);\n            }\n\n            // then add the array back in our result variable\n            result.set(`Team ${separator}`, f);\n\n            // counter up\n            separator += 1;\n\n            // if counter is going up the no. of teams, bring it back to fill team 1\n            if (separator > noOfTeams) {\n                separator = 1;\n            }\n        }\n\n        // finally setting the results to our state variable\n        setTeams(result);\n    }\n\n    const hanldeReset = e => {\n        e.preventDefault();\n\n        // to reset whole challenge, just reset the teams and set all chefs to wating list\n        setTeams([]);\n        setWaiting(chefs);\n    }\n\n    return (\n        <div className=\"container\">\n            <div className=\"row mt-30\">\n                <div className=\"col\">\n                    <h2>Cooking Show Challenge!</h2>\n                </div>\n            </div>\n            <div className=\"row mt-10\">\n                <div className=\"col text-left\">\n                    <label style={{width: '100%'}}>Choose no. of teams you want to create</label>\n                    <input type=\"number\" className=\"form-control\" placeholder={5}\n                           style={{width: '40%', display: 'inline'}}\n                           min={1} step={1} max={chefs.length}\n                           value={noOfTeams} onChange={e => setNoOfTeams(parseInt(e.target.value))}/>\n                    <button className=\"btn btn-primary m-1\" onClick={hanldeSubmit}>Create Teams</button>\n                    <button className=\"btn btn-secondary m-1\" onClick={hanldeReset}>Reset Teams</button>\n                </div>\n            </div>\n            <div className=\"row mt-20\">\n                <div className=\"col\">\n                    <ul className=\"nav nav-tabs\" id=\"myTab\" role=\"tablist\">\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link active\" id=\"teams-tab\" data-toggle=\"tab\" href=\"#teams\" role=\"tab\"\n                               aria-controls=\"teams\" aria-selected=\"true\">Kitchen Teams</a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" id=\"waiting-tab\" data-toggle=\"tab\" href=\"#waiting\" role=\"tab\"\n                               aria-controls=\"waiting\" aria-selected=\"false\">Waiting List</a>\n                        </li>\n                    </ul>\n                    <div className=\"tab-content\" id=\"myTabContent\">\n                        <div className=\"tab-pane fade show active mt-10\" id=\"teams\" role=\"tabpanel\"\n                             aria-labelledby=\"teams-tab\">\n                            <Teams data={teams}/>\n                        </div>\n                        <div className=\"tab-pane fade mt-10\" id=\"waiting\" role=\"tabpanel\" aria-labelledby=\"waiting-tab\">\n                            <WaitingList data={waiting}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","/Users/arjun/Downloads/app/src/components/Teams.js",[],"/Users/arjun/Downloads/app/src/components/WaitingList.js",["31","32"],"import {useState, useEffect} from 'react';\r\n\r\nfunction WaitingList(props) {\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <h4>Waiting List</h4>\r\n                </div>\r\n            </div>\r\n            <div className=\"row mt-10\">\r\n                <div className=\"col\">\r\n                    <div className=\"table-responsive\">\r\n                        <table className=\"table table-bordered table-striped table-sm\">\r\n                            <thead>\r\n                            <tr>\r\n                                <th>Sr.#</th>\r\n                                <th>Full Name</th>\r\n                                <th>Risotto Rating</th>\r\n                                <th>Pizza Rating</th>\r\n                                <th>Cake Rating</th>\r\n                                <th>Baked Potato Rating</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {props.data.length === 0 && <tr>\r\n                                <td colSpan={6} style={{padding: '15px'}}>No chefs are in waiting list.</td>\r\n                            </tr>}\r\n                            {props.data.map((chef, idx) =>\r\n                                <tr key={chef._id}>\r\n                                    <td className=\"text-center\">{idx + 1}</td>\r\n                                    <td>{chef.firstName} {chef.lastName}</td>\r\n                                    <td className=\"text-right\">{chef.abilities.find(k => k.type === \"Risotto\").rating}</td>\r\n                                    <td className=\"text-right\">{chef.abilities.find(k => k.type === \"Pizza\").rating}</td>\r\n                                    <td className=\"text-right\">{chef.abilities.find(k => k.type === \"Cake\").rating}</td>\r\n                                    <td className=\"text-right\">{chef.abilities.find(k => k.type === \"Baked Potato\").rating}</td>\r\n                                </tr>\r\n                            )}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WaitingList;\r\n","/Users/arjun/Downloads/app/src/components/Team.js",["33","34"],"import {useState, useEffect} from 'react';\r\n\r\nfunction Team(props) {\r\n\r\n    const getAverage = type => props.data.value.map(x => x.abilities.find(k => k.type === type).rating).reduce((accu, curr) => accu + curr, 0) / props.data.value.length;\r\n\r\n    return (\r\n        <div>\r\n            <h3>{props.data.key} (Average ability: {parseFloat((getAverage(\"Risotto\")+getAverage(\"Pizza\")+getAverage(\"Cake\")+getAverage(\"Baked Potato\"))/4).toFixed(2)})</h3>\r\n            <div className=\"table-responsive\">\r\n                <table className=\"table table-bordered table-striped table-sm\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Sr.#</th>\r\n                        <th>Full Name</th>\r\n                        <th>Risotto Rating</th>\r\n                        <th>Pizza Rating</th>\r\n                        <th>Cake Rating</th>\r\n                        <th>Baked Potato Rating</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {props.data.value.map((chef, idx) =>\r\n                        <tr key={chef._id}>\r\n                            <td className=\"text-center\">{idx + 1}</td>\r\n                            <td>{chef.firstName} {chef.lastName}</td>\r\n                            <td className=\"text-right\">{chef.abilities.find(k => k.type === \"Risotto\").rating}</td>\r\n                            <td className=\"text-right\">{chef.abilities.find(k => k.type === \"Pizza\").rating}</td>\r\n                            <td className=\"text-right\">{chef.abilities.find(k => k.type === \"Cake\").rating}</td>\r\n                            <td className=\"text-right\">{chef.abilities.find(k => k.type === \"Baked Potato\").rating}</td>\r\n                        </tr>\r\n                    )}\r\n                    <tr>\r\n                        <th></th>\r\n                        <th>Average</th>\r\n                        <td className=\"text-right\" style={{fontWeight: '700'}}>{getAverage(\"Risotto\")}</td>\r\n                        <td className=\"text-right\" style={{fontWeight: '700'}}>{getAverage(\"Pizza\")}</td>\r\n                        <td className=\"text-right\" style={{fontWeight: '700'}}>{getAverage(\"Cake\")}</td>\r\n                        <td className=\"text-right\" style={{fontWeight: '700'}}>{getAverage(\"Baked Potato\")}</td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Team;\r\n",{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":8,"column":19,"nodeType":"41","messageId":"42","endLine":8,"endColumn":27},{"ruleId":"43","severity":1,"message":"44","line":16,"column":8,"nodeType":"45","endLine":16,"endColumn":10,"suggestions":"46"},{"ruleId":"47","severity":1,"message":"48","line":52,"column":37,"nodeType":"49","messageId":"50","endLine":52,"endColumn":48},{"ruleId":"39","severity":1,"message":"51","line":1,"column":9,"nodeType":"41","messageId":"42","endLine":1,"endColumn":17},{"ruleId":"39","severity":1,"message":"52","line":1,"column":19,"nodeType":"41","messageId":"42","endLine":1,"endColumn":28},{"ruleId":"39","severity":1,"message":"51","line":1,"column":9,"nodeType":"41","messageId":"42","endLine":1,"endColumn":17},{"ruleId":"39","severity":1,"message":"52","line":1,"column":19,"nodeType":"41","messageId":"42","endLine":1,"endColumn":28},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-unused-vars","'setChefs' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'chefs'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setWaiting' needs the current value of 'chefs'.","ArrayExpression",["55"],"no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","'useState' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"56","fix":"57"},"Update the dependencies array to be: [chefs]",{"range":"58","text":"59"},[529,531],"[chefs]"]